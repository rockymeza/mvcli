#!/usr/bin/env python
import sys
import copy
import types

class Argv(list):
    def nextisflag(self):
        return self[0].startswith('-')

def callablefunc(func):
    if type(func) == types.FunctionType or type(func) == types.MethodType:
        return func
    return func()

class ActionMetaclass(type):
    def __new__(mcs, name, bases, dict):
        dict['options'] = []
        for method_name, method in dict.items():
            if not method_name.startswith('__') and type(method) == types.FunctionType:
                method.options = []
                
        return type.__new__(mcs, name, bases, dict)

class Action(object):
    __metaclass__ = ActionMetaclass

    def __init__(self):
        self.description = ""

    def __call__(self, *args):
        help(self)

def help(cls):
    print cls



class main(Action):
    description = "This is a cool application"
    options = []
    
    def __call__(self, argv):
        print "Tada!" 

    def alt_method(self, argv):
        print "This is another command"

    class bar(Action):
        description = "this is a subcommand"

        def __call__(self, argv):
            print "Haha!"





class App(object):
    def __init__(self, main):
        self.main = main

    def run(self, argv):
        argv = Argv(copy.copy(argv))
        filename = argv.pop(0)
        action = callablefunc(self.main)
        while len(argv):
            if not argv.nextisflag():
                nextarg = argv.pop(0)
                if hasattr(action, nextarg) and callable(getattr(action, nextarg)):
                    action = callablefunc(getattr(action, nextarg))
                else:
                    break
            else:
                flag = argv.pop(0)
                action.options.append(flag)


        action(argv)
        
if __name__ == "__main__":
    App(main).run(sys.argv)

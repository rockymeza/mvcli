#!/usr/bin/env python
import sys
from core.interface import InterfaceMeta, BuiltinHelp
from core import exceptions
from core.delegator import call_with_args

class OverloadedFunction(object):
    def __init__(self, fn):
        self.fns = [fn]

    def call_with_args(self, argv):
        for fn in self.fns:
            try:
                return call_with_args(fn, argv)
            except exceptions.OptionError:
                pass
        raise exceptions.OptionError

def overload(overloaded):
    if not isinstance(overloaded, OverloadedFunction):
        overloaded = OverloadedFunction(overloaded)
    def f(fn):
        overloaded.fns.append(fn)
        return overloaded
    return f

__metaclass__ = InterfaceMeta
class Fbmvc:
    description = 'Fbmvc description ftw'
    help = BuiltinHelp

    def prepare(self):
        self.settings['fbmvc'] = 'was here'
    class Generate:
        description = 'Migrate description ftw'
        def prepare(self):
            self.settings['common'] = 'resource'
        action = help
        class Migration:
            def action(self):
                print self.settings
        class Controller:
            pass
        class View:
            pass
        class Gateway:
            def action(controller, *actions):
                    Controller.action(name, *actions)
                    View.action(name, *actions)
    class Migrate:
        description = 'Migrate description ftw'
        def action(self):
            print self.settings

        @overload(action)
        def action(self, version):
            migrate_to_version(version)

        class Next:
            def action(version):
                migrate_to_version(version)

Fbmvc().run(sys.argv)
